'.source.js':
  'Functional Component one liner':
    'prefix': 'dumbone'
    'body': """
      import React from 'react'

      const ${1:Component} = props => <h1>${2:Component}</h1>

      export default ${1:Component}
    """

  'Functional Component multi liner':
    'prefix': 'dumbmulti'
    'body': """
      import React from 'react'

      const ${1:Component} = props => {
        return (
          <h1>${2:Component}</h1>
        )
      }

      export default ${1:Component}
    """

  'Component':
    'prefix': 'comp'
    'body': """
      import React, { Component } from 'react'

      class ${1:Component} extends Component {
        render () {
          return (
            <h1>${2:Component}</h1>
          )
        }
      }

      export default ${1:Component}
    """

  'Component with Constructor':
    'prefix': 'compcons'
    'body': """
      import React, { Component } from 'react'

      class ${1:Component} extends Component {
        constructor (props) {
          super (props)

          this.state = {

          }
        }

        render () {
          return (
            <h1>${2:Component}</h1>
          )
        }
      }

      export default ${1:Component}
    """


  'Container':
    'prefix': 'conta'
    'body': """
      import React, { Component } from 'react'
      import { connect } from 'react-redux'
      import { ${3:action} } from '${4:location}'

      class ${1:Component} extends Component {
        constructor (props) {
          super (props)
        }

        render () {
          return (
            <h1>${2:Component}</h1>
          )
        }
      }

      export default connect(({}) => {
        return { property: value}
      }, action )(${1:Component})
    """

  'HOC':
    'prefix': 'hoc'
    'body': """
      import React, { Component } from 'react'

      export default WrappedComponent => {
        class ${1:HOC} extends Component {
          render(){
            return <WrappedComponent {...this.props}/>
          }
        }
        return ${1:HOC}
      }
    """

  'willmount':
    'prefix': 'willmount'
    'body': """
      componentWillMount(){
        ${1: content}
      }
   """

  'didmount':
    'prefix': 'didmount'
    'body': """
      componentDidMount(){
        ${1: content}
      }
   """

   'willreceive':
     'prefix': 'willreceive'
     'body': """
       componentWillReceiveProps(nextProps, nextContext){
         ${1: content}
       }
    """

    'shouldupdate':
      'prefix': 'shouldupdate'
      'body': """
        shouldComponentUpdate(nextProps, nextState, nextContext){
          ${1: content}
        }
     """

     'willupdate':
       'prefix': 'willupdate'
       'body': """
         componentWillUpdate(nextProps, nextState, nextContext){
           ${1: content}
         }
      """

      'didupdate':
        'prefix': 'didupdate'
        'body': """
          componentDidUpdate(nextProps, nextState, nextContext){
            ${1: content}
          }
      """

      'willunmount':
        'prefix': 'willunmount'
        'body': """
          componentWillUnmount(){
            ${1: content}
          }
      """

  'Import':
    'prefix': 'imp'
    'body': "import ${1:Component} from '${2:Location}'${3}"


  'Routes':
    'prefix': 'routes'
    'body': """
      import React from 'react'
      import { Route, IndexRoute } from 'react-router'
      import App from './App'

      export default (
        <Route path='/' component={App}>
          <IndexRoute component={Home}/>
          <Route path='*' component={NoMatch}/>
        </Route>
      )
    """

  'Main Reducer':
    'prefix': 'mainred'
    'body': """
      import { combineReducers } from 'redux'

      const rootReducer = combineReducers({
        state: (state = {}) => state
      })

      export default rootReducer
    """

  'Index':
    'prefix': 'indexapp'
    'body': """
      import React from 'react'
      import { render } from 'react-dom'
      import { Router, browserHistory } from 'react-router'
      import { Provider } from 'react-redux'
      import { createStore, applyMiddleware } from 'redux'
      import reduxThunk from 'redux-thunk'
      import routes from './routes'
      import reducers from './reducers'
      import './index.css'

      const createStoreWithMiddleware = applyMiddleware(reduxThunk)(createStore);
      const store = createStoreWithMiddleware(reducers, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())
      // const token = localStorage.getItem('token')
      // const user = localStorage.getItem('currentUser')
      //
      // if (token && user) {
      //   store.dispatch({type: AUTH_USER})
      // }

      render(
        <Provider store={store}>
          <Router history={browserHistory} routes={routes} />
        </Provider>,
        document.getElementById('root')
      )
    """
